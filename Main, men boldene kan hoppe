PVector location;
PVector velocity = new PVector();
PVector gravity1 = new PVector(0, 1);
PVector gravity2 = new PVector(0, 1);
int ballMulti = 16;
int ballColl = ballMulti/2;
ArrayList<Mover> moveListe = new ArrayList<Mover>();
int o = 1;




void setup() {
  size(640, 360);
  velocity = new PVector(2.5, 5);
  fill(69);
  arc(width/2,height,width,height/4,PI,TWO_PI);
  for (int i = 0; i< 1; i++) {
    moveListe.add(new Mover(location = new PVector(ballMulti+50*i, 100)));
  }
}




void draw() {
  clear();
  background(255);
  for (int i = 0; i< moveListe.size(); i++) {
    Mover mover = moveListe.get(i);
    mover.applyForce(gravity1);
    mover.ShitUdate();
    mover.display();
    mover.checkEdges();
  }

  if (keyPressed) {
    if (keyCode == UP) {
    for (int i = 0; i< moveListe.size(); i++) {
      Mover mover = moveListe.get(i);
      PVector wind = new PVector(0, -10);
      mover.applyForce(wind);
      }
    }
  }
  
  
}

void mousePressed(){
      moveListe.add(new Mover(location = new PVector(ballMulti+ 50*o, 100)));
      o++;
      if(o*50>width){
        o=0;
      }
    }
  





class Mover {
  PVector location;
  PVector velocity;
  PVector acceleration;
  //The object now has mass!
  float mass;

  Mover(PVector location ) {
    //And for now, we’ll just set the mass equal to 1 for simplicity.
    mass = 2;
    this.location = location;
    velocity = new PVector(0, 0);
    acceleration = new PVector(0, 0);
  }
  //Newton’s second law.
  void applyForce(PVector force) {
    //Receive a force, divide by mass, and add to acceleration.
    PVector f = PVector.div(force, mass);
    acceleration.add(f);
  }




  void ShitUdate() { 
    velocity.add(acceleration);
    velocity.mult(0.99);
    location.add(velocity);
    //Now add clearing the acceleration each time!
    acceleration.mult(0.1);
  }




  void display() {
    stroke(0);
    fill(175);
    //Scaling the size according to mass.
    ellipse(location.x, location.y, mass*ballMulti, mass* ballMulti);
  }
  
  
  
  //Somewhat arbitrarily, we are deciding that an object bounces when it hits the edges of a window.
  void checkEdges() {
    if (location.x > width - mass * ballColl) {
      location.x = width - mass * ballColl;
      velocity.x *= - 1;
    } else if (location.x < 0 + mass * ballColl) {
      velocity.x *= -1;
      location.x = 0 - mass * ballColl;
    }

    if (location.y  > height- mass*ballColl) {
      //Even though we said we shouldn't touch location and velocity directly, there are some exceptions. Here we are doing so as a quick and easy way to reverse the direction of our object when it reaches the edge.
      location.y = height- mass*ballColl;
      velocity.y *= -1;
      acceleration.mult(-1);
    }
  }
}
